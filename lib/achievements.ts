import { prisma } from "@/lib/prisma"

interface CourseProgress {
  completedAt: Date | null;
}

export const ACHIEVEMENTS = {
  FIRST_COURSE: {
    id: "first-course",
    title: "–ü–µ—Ä–≤—ã–π —à–∞–≥",
    description: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫—É—Ä—Å",
    icon: "üéØ",
    type: "COURSE_COMPLETE",
    requirement: 1
  },
  STUDY_STREAK: {
    id: "study-streak",
    title: "–ù–∞ –≤–æ–ª–Ω–µ",
    description: "–£—á–∏—Ç–µ—Å—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
    icon: "üî•",
    type: "STREAK",
    requirement: 7
  },
  TIME_MASTER: {
    id: "time-master",
    title: "–ú–∞—Å—Ç–µ—Ä –≤—Ä–µ–º–µ–Ω–∏",
    description: "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ 100 —á–∞—Å–æ–≤ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ–º",
    icon: "‚è∞",
    type: "TIME_SPENT",
    requirement: 6000 // –º–∏–Ω—É—Ç
  },
  COURSE_MASTER: {
    id: "course-master",
    title: "–ú–∞—Å—Ç–µ—Ä –∫—É—Ä—Å–æ–≤",
    description: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ 10 –∫—É—Ä—Å–æ–≤",
    icon: "üìö",
    type: "COURSE_COMPLETE",
    requirement: 10
  },
  SPEED_LEARNER: {
    id: "speed-learner",
    title: "–ë—ã—Å—Ç—Ä—ã–π —É—á–µ–Ω–∏–∫",
    description: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∫—É—Ä—Å –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞",
    icon: "‚ö°",
    type: "SPEED_COMPLETE",
    requirement: 1
  },
  PERFECT_SCORE: {
    id: "perfect-score",
    title: "–û—Ç–ª–∏—á–Ω–∏–∫",
    description: "–ü–æ–ª—É—á–∏—Ç–µ 100% –ø–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∞–º –≤ –∫—É—Ä—Å–µ",
    icon: "üéØ",
    type: "PERFECT_SCORE",
    requirement: 1
  },
  LONG_STREAK: {
    id: "long-streak",
    title: "–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü",
    description: "–£—á–∏—Ç–µ—Å—å 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
    icon: "üèÉ",
    type: "STREAK",
    requirement: 30
  },
  NIGHT_OWL: {
    id: "night-owl",
    title: "–ù–æ—á–Ω–∞—è —Å–æ–≤–∞",
    description: "–£—á–∏—Ç–µ—Å—å –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏",
    icon: "ü¶â",
    type: "STUDY_TIME",
    requirement: 1
  }
} as const

export async function checkAchievements(userId: string) {
  const stats = await prisma.userStatistics.findUnique({
    where: { userId },
    include: {
      user: {
        select: {
          courseProgress: {
            select: {
              completedAt: true
            }
          },
          userAchievements: true
        }
      }
    }
  })

  if (!stats) return

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
  for (const [key, achievement] of Object.entries(ACHIEVEMENTS)) {
    const existingAchievement = await prisma.userAchievement.findUnique({
      where: {
        userId_achievementId: {
          userId,
          achievementId: achievement.id
        }
      }
    })

    if (existingAchievement?.completed) continue

    let progress = 0
    let completed = false

    switch (achievement.type) {
      case "COURSE_COMPLETE":
        progress = stats.user.courseProgress.filter((p: CourseProgress) => p.completedAt).length
        completed = progress >= achievement.requirement
        break
      case "STREAK":
        progress = stats.currentStreak
        completed = progress >= achievement.requirement
        break
      case "TIME_SPENT":
        progress = stats.totalTimeSpent
        completed = progress >= achievement.requirement
        break
    }

    if (existingAchievement) {
      await prisma.userAchievement.update({
        where: { id: existingAchievement.id },
        data: {
          progress,
          completed,
          earnedAt: completed ? new Date() : null
        }
      })
    } else {
      await prisma.userAchievement.create({
        data: {
          userId,
          achievementId: achievement.id,
          progress,
          completed,
          earnedAt: completed ? new Date() : null
        }
      })
    }

    if (completed) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      await prisma.notification.create({
        data: {
          userId,
          title: "–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!",
          message: `–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${achievement.title}"`,
          type: "ACHIEVEMENT",
          metadata: { achievementId: achievement.id }
        }
      })
    }
  }
} 