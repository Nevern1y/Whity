generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                  String            @id @default(cuid())
  name                String?
  email               String?           @unique
  emailVerified       DateTime?
  image               String?
  hashedPassword      String?
  role                UserRole          @default(USER)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  isOnline            Boolean           @default(false)
  lastActive          DateTime?
  accounts            Account[]
  sessions            Session[]
  courses             Course[]
  courseProgress      CourseProgress[]
  courseRatings       CourseRating[]
  activities          Activity[]
  notifications       Notification[]
  achievements        UserAchievement[]
  sentFriendships     Friendship[]      @relation("SentFriendships")
  receivedFriendships Friendship[]      @relation("ReceivedFriendships")
  articles            Article[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  location     String?
  userAgent    String?  @db.Text
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Course {
  id          String           @id @default(cuid())
  title       String
  description String           @db.Text
  image       String?
  published   Boolean          @default(false)
  level       Level            @default(BEGINNER)
  duration    String           @default("0")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  authorId    String
  author      User             @relation(fields: [authorId], references: [id])
  progress    CourseProgress[]
  ratings     CourseRating[]

  @@index([authorId])
  @@map("courses")
}

model CourseProgress {
  id             String    @id @default(cuid())
  userId         String
  courseId       String
  progress       Int       @default(0)
  completedAt    DateTime?
  lastAccessedAt DateTime  @default(now())
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("course_progress")
}

model CourseRating {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("course_ratings")
}

model Activity {
  id          String   @id @default(cuid())
  userId      String
  type        String
  description String
  metadata    Json?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@map("activities")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String   @db.Text
  type      String
  link      String?
  read      Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@map("notifications")
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@map("user_achievements")
}

model Friendship {
  id         String           @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendshipStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  sender     User             @relation("SentFriendships", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User             @relation("ReceivedFriendships", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
  @@index([status])
  @@map("friendships")
}

model Article {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  description String?  @db.Text
  slug        String   @unique
  image       String?
  published   Boolean  @default(false)
  views       Int      @default(0)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])

  @@index([authorId])
  @@map("articles")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
  INSTRUCTOR
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}
